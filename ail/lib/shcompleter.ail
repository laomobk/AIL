// shcompleter.ail - a completer for ail shell

_readline_available = False;

try {
    /* import readline and check readline avalible*/
    #import readline
    _readline_available = True;
} catch ImportError _ {}

_debug_completer = false;

class Completer {
    init(self, namespace_) {
        self._namesapce = namespace_;
        self.matches = [];
    }

    func complete(self, text: str, state: int) {
        if not _readline_available {
            return '\t';
        }

        ns = self._namesapce;

        if not text.strip() {
            if state == 0 {
                readline.insert_text('\t');
                readline.redisplay();
                return '';
            } else {
                return null;
            }
        }
        
        try {
            if state == 0 {
                if contains(text, '.') {
                    m = self.match_attr(text);
                } else {
                    m = self.match_name(text);
                }

                self._matches = m;
            }
            
            if state < len(self._matches) {
                return self._matches[state];
            } else {
                return null;
            }

        } catch Exception e {
            if _debug_completer {
                #from traceback import print_exc
                print '(completer: %s)' % e;
                print_exc();
            }
            return [];
        }
    }

    func match_name(self, text: str) {
        #from ail.core.aparser import _keywords

        ns = self._namesapce;
        matches = [];
        n = len(text);

        foreach word in _keywords {
            if word[slice(null, n)] == text {
                matches.append(word);
            }
        }

        foreach word in ns {
            if contains(matches, word) or contains(text, '::') {
                continue;
            }

            if word[slice(null, n)] == text {
                word = self.__rename_callable(word, ns.get(word, None))
                matches.append(word);
            }
        }

        b = builtins().keys();
        b_ns = builtins()
        
        foreach word in b {
            if contains(matches, word) or contains(text, '::') {
                continue;
            }

            if word[slice(null, n)] == text {
                word = self.__rename_callable(word, b_ns.get(word, null))
                matches.append(word);
            }
        }

        matches.sort();

        return matches;
    }

    func match_attr(self, text: str) {
        #import re
        #m = re.match(r"(\w+(\.\w+)*)\.(\w*)", text);
        if not m {
            return [];
        }

        expr, attr = m.group(1, 3);

        try {
            this = eval(expr, self._namesapce);
        } catch Exception _ {
            return [];
        }

        words = set(dir(this));
        matches = [];
        show_prefix = attr[slice(0, 1)] == '_';

        n = len(attr);

        foreach word in words {
            if contains(word, '::') or (
                    not show_prefix and word[slice(0, 1)] == '_') {
                continue;
            }

            if word[slice(None, n)] == attr {
                word = self.__rename_callable(word, getattr(this, word, null))
                matches.append('%s.%s' % (expr, word));
            }
        }

        matches.sort();

        return matches;
    }

    func __rename_callable(self, text, obj) {
        if callable(obj) {
            return '%s(' % text;
        }

        return text;
    }
}

