begin

load 'types'


struct _list_t {
    __ele
    protected size
}


fun (_list_t) __copyNew(this, elen, eleo) {
    // copy old element list to new element list

    i = 0
    while i < len(eleo) {
        elen[i] = eleo[i]
        i = i + 1
    }
}


/*
 * lapped(list_t a, any o)
 * app} o to the } of a
 */
fun (_list_t) append(this, o) {
    eleo = this.__ele
    this.__ele = array(this.size + 1)

    this.__copyNew(this.__ele, eleo)
    this.__ele[-1] = o

    this.size = this.size + 1

    return true
}


/*
 * lremove(list_t a, int index)
 * remove the object at 'index'
 */
fun (_list_t) remove(this, index) {
    if type(index) != type(0) {
        return false
    }

    if index >= len(this.__ele) {
        return false
    }

    // 从 index 处切割，然后再覆盖
    i = 0
    left = array(index)

    while i < index {  // 填充 left
        left[i] = this.__ele[i]
        i = i + 1
    }

    new_a = array(len(this.__ele) - 1)
    
    i = 0
    while i < len(left) {
        new_a[i] = left[i]
        i = i + 1
    }
    
    i = index + 1
    ni = 0
    while ni < len(new_a) and i < len(this.__ele) {
        new_a[ni] = this.__ele[i]
        i = i + 1
        ni = ni + 1
    }

    this.__ele = new_a
    this.size = this.size - 1

    return true
}


fun (_list_t) toString(this) {
    return repr(this.__ele)
}


fun list() {
    lo = new(
        _list_t, 
        [
            [], 
            0,
        ]
        )

    return lo
}

end
