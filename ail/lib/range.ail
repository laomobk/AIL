
struct __StopIteration {}

StopIteration = new(__StopIteration)

struct __RangeIter {
    __now
    __step
    __from
    __to
}

fun (__RangeIter) next(this) {
    if (this.__now >= this.__to or 
        this.__now < this.__from) {
        return StopIteration
    }
    
    result = this.__now
    this.__now = this.__now + this.__step

    return result
}

fun rangeFromTo(from, to) {
    return new(__RangeIter, [from, 1, from, to])
}

fun rangeTo(to) {
    return new(__RangeIter, [0, 1, 0, to])
}

fun range(from, to, step) {
    return new(__RangeIter, [from, step, from, to])
}


if __main__ {
    fun testRange(rName, rangeObj) {
        print 'test range:'; rName

        for (o = rangeObj.next(); 
                not equal(o, StopIteration);
                    o = rangeObj.next()) {
            print o
        }
    }

    rFTS = range(1, 10, 2)
    rFT = rangeFromTo(1, 3)
    rT = rangeTo(5)

    testRange('FTS', rFTS)
    testRange('FT', rFT)
    testRange('T', rT)
}

