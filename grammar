
EOL := ';' | NEWLINE

print_stmt := 'print' expr [',' expr]* EOL
input_stmt := 'input' expr ',' val_list EOL

if_else_stmt := 'if' test block ['elif' block]* ['else' block]

while_stmt := 'while' expression block

do_loop_stmt := 'do' block 'loop' 'until' expression EOL

func_def := ['fun' | 'func'] [bind] NAME '(' param_list ')' [':' expression] block

expression := match_expr | tuple_expr

tuple_expr := or_test [',' or_test]

or_test := and_test ['or' and_test]*
and_test := not_test ['and' not_test]*
not_test := 'not' cmp_test
cmp_test := bin_op_expr [cmp_op bin_op_expr]* 

cmp_op := '>' | '<' | '=' | '!=' | '>=' | '<='

bin_op_expr := xor_expr [['|' | '&'] xor_expr]*
xor_expr := shift_expr ['^' shift_expr]*
shift_expr := add_sub_expr [['<<' | '>>'] add_sub_expr]*
add_sub_expr := md_expr [('+' | '-') md_expr]*
md_expr := mod_expr [('*' | '/') mod_expr]*
mod_expr := pow_expr ['mod' pow_expr]*
pow_expr := call_subscript_member_access_expr ['**' call_subscript_member_access_expr]*
call_subscript_member_access_expr := member_access_expr | call_expr | subscript_expr
member_access_expr := cell [['.'] NAME]*
call_expr := cell ['(' arg_list ')']
subscript_expr := cell ['[' expression ']']
cell := NAME | STRING | NUMBER | anonymous_function | lambda | map_expr | array_expr
lambda := '(' param_list ')' '->' block | expression
anonymous_function := 'func' | 'fun' '(' param_list ')' block

map_expr := '{' kv_pair [',' kv_pair]'}'
kv_pair := expression ':' expression

array_expr := '[' expression [',' expression]* ']'

match_expr := 'match' expression '{' match_case [',' match_case]* '}'
match_case := expression [',' expression]* ':' expression

arg_list := arg [',' arg]* [',' star_arg]
arg := expression
star_arg := '*' expression

param_list := param [',' param]* [',' star_param]
param := NAME [':' expression]
star_param := '*' NAME [':' expression]

assign_stmt := call_subscript_member_access_expr | tuple_expr [':' expression] assi_op expression
assi_op := '=' | '+=' | '-=' | '*=' | '/=' | '**=' | '<<=' | '>>=' | '^='

stmt := while_stmt | if_expr | if_else_stmt | do_loop_stmt | func_def |
	print_stmt | input_stmt | load_stmt | import_stmt | assign_stmt | struct_def |
    class_def | for_stmt | try_catch_stmt

block := '{' stmt* '}'

program := block 'end'

continue_stmt := 'continue' EOL
break_stmt := 'break' EOL
return_stmt := 'return' [expression] EOL

load_stmt := 'load' STRING
import_stmt := 'import' [NAME] STRING ['(' NAME [',' NAME]* ')']

struct_def := 'struct' NAME 'is' '{' [['protected' NAME] | NAME]* '}'

class_def := 'class' NAME ['extends' [expression [',' expression]*]] block

for_stmt := 'for' ['('] [for_init] ';' [for_test] ';' [for_update] [')'] block
for_init := expression [',' expression]
for_test := expression
for_update := expression [',' expression]

throw_stmt := 'throw' [expression] EOL
assert_stmt := 'assert' expression EOL

catch_case := 'catch' expression NAME block
try_catch_stmt := try block catch_case* ['finally' block]