存储和使用变量
==============

定义与赋值
##########

变量是编程中十分重要的存在。没有变量，那么一切操作都会变得十分痛苦。

AIL作为一门高级程序语言，自然也提供这方面的支持。

若要 **定义** 一个变量，只要在变量名和变量值之间，使用等号(:code:`=`)相连，就像这样：

::

    >> a = 0


这样会发生什么？虽然在交互模式下输入这行代码，按下回车后，你发现什么也没有发生，AIL既不会自动卸载，天上也不会掉下女朋友。但事实是，通俗来讲， **AIL存储了变量a** 。那么，如何访问这个变量呢？只需要敲入名字即可。

::

    ...
    >> a
    < 0 >


a的值被打印出来了。

**切记，不要访问一个不存在的变量！**

::
    
    >> b
    >> b
    Traceback (most recent call last):
      File '<shell>', line 2, in <main>
    NameError: name 'b' is not defined


那么问题来了，若再执行一遍: :code:`a = 0` ，会发生什么？因为AIL已经被存储一遍了，为了不让本章阅读难度提升，通俗来讲，这个操作让AIL修改了a的值，但修改后仍然为0。要想看看a的变化，不妨试试别的值

::

    >> a = 0
    >> a
    < 0 >
    >> a = 3
    < 3 >


可以发现，a的值的确被修改了。

这种操作，叫做 **赋值** 。

问题来了，AIL的变量可以存储什么？刚才的演示，存储的是数字。实际上，（不严格来说）AIL的变量可以存储 **任何东西** ，包括字符串，数组，函数，结构体和对象等等...


使用变量
########

使用变量，只需要键入其变量名即可，这是对变量最基本的操作（赋值比这更高级）。但是，光键入变量名还不够。还需要将变量投入使用。

使用变量进行运算
^^^^^^^^^^^^^^^^

在实际使用的时候，我们可以把变量看做其变量的值，来进行运算。

::

    >> a = 2
    >> a + 1
    < 3 >
    >> 'Nezha'[a]
    'z'


还可以对变量进行其值的类型所具有的操作，如：

::

    >> name = 'Nezha'
    >> name[0]
    'N'
    >> name[-1]
    'a'
    >> len(name)
    < 5 >


无意义代码
^^^^^^^^^^

何为 *无意义* 代码？就是没有任何效果的代码。在Java这类编程语言中，无意义代码是不允许存在的。

比如在Java程序中，下面的内容就属于无意义代码：

.. code:: java

    ...
    int a = 0;
    a  // no effect.
    ...


为什么没有意义？因为没有任何作用效果，不会影响程序运行。

在AIL中，虽然是“纵容”无意义代码的存在，但是还是少写这类代码。否则会对性能产生影响。

若要问：在交互环境中，我键入 a ，这属于无意义代码吗？
答案是否定的，因为它有意义。（至少让你知道a的值是什么或者它存不存在）。

作为别称
^^^^^^^^

AIL的变量本质上，就是持有对值的引用。通俗来讲，就是打标签。所以说利用这一特性，可以干一些别的事情。

*在后续有关函数的章节中，我们会认识到函数名也是变量名*

比如，可以创建某个函数的别称：

::

    >> get_length = len
    >> get_length('Nezha')
    < 5 >
    >> len('Nezha')
    < 5 >


这样对于一些比较难写，但是常用的函数来说，这是很方便的。比如内置函数 :code:`_get_ccom` ，可以执行 :code:`get_ccom = _get_ccom` ，这样在使用函数的时候，就不用翻山越岭去找到那个下划线了。

*要是问为啥不直接在语言里面把 _get_ccom 改成 get_ccom ，回答就是: ...*


小结
####


