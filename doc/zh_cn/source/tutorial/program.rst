基本AIL程序
===========


在体验了AIL牌计算器后，相信你已经懂得如何使用一些基本类型和变量了。接下来，就是开始真正了解AIL，使用AIL编写程序的时候了。


编写AIL程序
###########

AIL程序，实际上就是一个文本文件，你可以使用任何的文字编辑器来编写AIL程序，如vim, sublime text, atom这类文本编辑器，当然，Windows记事本也是允许的。

通常，AIL程序以 :code:`.ail` 作为后缀。


运行AIL程序
###########

在编写完AIL程序后，接下来要做的就是运行程序。

运行AIL程序，首先你得确保你安装了AIL解释器。

现在假设你编写好了一个程序，:code:`hello.ail` ，那么运行它，只需要在终端输入：

::

    $ ail hello.ail
    Hello World!


不出意外，你会看到这个程序的输出（如果你为这个程序设置了输出）。

下面是 :code:`hello.ail` 的源码，可以写入到文件中，使用AIL运行：

::

    begin

    print 'Hello World!'
    
    end


*有关AIL程序的细节，将在稍后讲解。*


AIL程序结构
###########

AIL程序的结构非常简单。对于标准AIL程序， **必须以 begin 开头，以 end 结尾** 。就像上面的 :code:`hello.ail` 一样。

被 begin 和 end 包裹着的，就是AIL程序的主要逻辑部分了。这一部分主要由一个一个语句组成，在下面的章节，将会具体阐述这些相关内容。


AIL语句
#######

语句是AIL程序的基本元素，一条条语句组合，可以实现各种各样的操作。


AIL语句块
#########

语句块是AIL组织语句的一种方式，语句块由 :code:`{ }` 包裹着。

语句块具有从属性，一般来说，没有孤独的语句块。比如用于分支判断的if语句，或者用于进行循环的while语句，都拥有自己的语句块。

::
    
    while true { 
        print 'inside while'
    }
    print 'outside while'


需要注意的是，在书写语句块的时候，应该严格遵循格式规定。比如对于 while 语句，语句块的左花括号，应该与 while 同一行，否则将产生语法错误！

当然，除了推荐的花括号外，传统的单词型分界也是支持的，比如：

::

    if n == 1 then 
        print 'yes!'
    endif


但是对于单词型分界，要求会更多。具体要看每个语句对单词的要求。

