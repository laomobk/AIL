AIL 1.2 更新日志
================


全新语法
########

AIL 1.2 版本不再推荐使用 :code:`then` , :code:`}if` 这类单词作为block的起始和终止标志，而选用更为方便的: :code:`{` :code:`}` 。


新增：闭包的支持
################

在1.2版本中，闭包正式被支持，现在您可以使用闭包来编写程序了。

::
    
    // closure.ail

    fun f() {
        x = 726

        fun inner() {
            return x
        }

        return inner
    }

    print f()()

::

    $ ail ./closure.ail
    726


新增：方法绑定
##############

在1.2版本以前，想要给 :code:`struct object` 绑定方法，需要显式赋值：

::
    
    struct Person {
        name
        say_hi
    }

    fun say_hi() {
        print 'hello, my name is' ; this.name
    }

    nezha = new(Person)
    nezha.name = 'Nezha'
    nezha.say_hi = sai_hi


这种方法虽然行得通，但是经过考虑，这是极不优雅的。于是在AIL1.2版本中， **方法绑定** 被正式加入:

::

    struct Person {
        name
    }

    fun (Person) say_hi() {
        print 'hello, my name is' ; this.name
    }

    nezha = new(Person)
    nezha.name = 'Nezha'


Person，也就是被绑定者，必须是 **struct type** 。


新增：elif 语句
###############

在1.2以前，想要表示类似 **if - else if - else** 这类结构将极为繁琐。AIL1.2版本中，:code:`elif` 被加入。

::

    if x == 726 {
        print 'it is 726'
    } elif x == 1026 {
        print 'it is 1026'
    } else {
        print 'it is 810？
    }


elif 的加入让判断操作更为简便。


