名称空间
########


类型
++++

AIL的名称空间可分为3种：本地命名空间，全局命名空间，内置成员命名空间。


检索顺序
++++++++

当要检索一个名称时，如果没有特别指定，AIL会根据： **本地名称空间 → 全局名称空间 → 内置成员名称空间** 的顺序检索名称空间。


结构与从属关系
++++++++++++++

各个名称空间的结构与从属关系为：

.. code::
    
    [global 
        [local 
            [current ...] + 
            ([nonlocal ...] + ... + [nonlocal ...])
        ] ...
    ] + 
    [builtins ...]


本地名称空间
++++++++++++

AIL中的本地名称空间包括： **当前名称空间(和外部名称空间列表)** 。

其中，当前名称空间是离代码最近的一个名称空间，用户的代码就是在这个名称空间内执行的。如果没有特殊指定，AIL首先会检索这一个名称空间。

如果执行的代码在函数之中，则可能会出现外部命名空间(列表)。这是因为在函数执行时，执行的函数可能处于另一个函数之中，即内嵌函数或闭包。为了能访问到外部函数的内容，本地名称空间会拥有一个对外部名称空间的 **引用** 。一般地，有几层外部函数，就有几个引用。

在 **global域** 中。全局名称空间的内容与本地名称空间的内容相同。并且当全局名称空间作为本地名称空间时，不存在外部名称空间列表。


全局名称空间
++++++++++++

AIL中，全局名称空间只有一个，用于存放全局成员，当进行import或者load时，也是使用全局名称空间的成员。


内置成员名称空间
++++++++++++++++

AIL中，内置成员名称空间是独立与其他名称空间的，同时，内置成员名称空间也是受保护的。

不能改变内置名称空间中成员的值，在代码中对内置成员进行赋值。实际只是在全局名称空间中 **挡住** 原来的内置成员。

