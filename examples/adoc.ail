// adoc.ail

#from inspect import getargs


__author__ = 'Laomo'


class FuncArg {
    init(self, args: List[String], vararg: String, kwarg: String, defaults: List[String]) {
        self.args = self.__add_defaults(defaults, args);
        self.vararg = vararg;
        self.kwarg = kwarg;
        self.defaults = defaults;
    }

    func __add_defaults(self, defaults, args): List[String] {
        if not defaults {
            return args;
        }

        len_default = len(defaults);
        start_i = len(args) - len_default;

        for i = start_i; i < len(args); i += 1 {
            args[i] = '{}={}'.format(args[i], repr(defaults[i - start_i]))
        }

        return args
    }

    @staticmethod
    func from_argument(arg, defaults) {
        return FuncArg(arg.args, arg.varargs, arg.varkw, defaults);
    }

    func __str__(self): String {
        return '({}{}{})'.format(
            ', '.join(self.args),
            match self.vararg {
                null: '',
                else: ', *{}'.format(self.vararg),
            },
            match self.kwarg {
                null: '',
                else: ', **{}'.format(self.kwarg),
            }
        )
    }

    __repr__ = __str__
}

class FuncSignature {
    init(self, arg: FuncArg, name: String, doc: String) {
        self.arg = arg;
        self.name = name;
        self.doc = doc;
    }
    
    @staticmethod
    func from_func(func_obj): FuncSignature {
        code = func_obj.__code__;
        arg = FuncArg.from_argument(getargs(code), func_obj.__defaults__);
        name = code.co_name;
        doc = func_obj.__doc__;

        return FuncSignature(arg, name, doc)
    }
}


namespace Markdown {
    class DocElement {
        init(self, value: String) {
            self.value = value;
        }

        func gen_md_string(self): String {
            return '***<Doc Element>***'
        }
    }

    class H1 extends DocElement {
        func gen_md_string(self): String {
            return '## {}'.format(self.value)
        }
    }
    class Para extends DocElement {
        func gen_md_string(self): String {
            return self.value
        }
    }
}

class DocGen {
    init(self) {
        self.__md = MarkdownBuilder()
    }

    func _gen_function(self, func_signature): List[Markdown.DocElement] {
        h1_string = "{}{}".format(func_signature.name, func_signature.arg);
        para_string = match func_signature.doc { null: '<no doc string>', else: func_signature.doc}
        
        h1 = Markdown.H1(h1_string);
        para = Markdown.Para(para_string);

        return [h1, para];
    }
}


class StringBuilder {
    init(self) {
        self.__str = '';
    }

    func add_line(self, text: String) {
        self.__str += '{}\n'.format(text);
    }

    func get_string(self): String {
        return self.__str;
    }
}


class MarkdownBuilder {
    init(self) {
        self.__layout = [];
    }

    func add_element(self, elem) {
        if isinstance(elem, list) {
            self.__layout.extend(elem);
        } else {
            self.__layout.append(elem)
        }
    }

    func get_markdown_string(self, headline: String = '<NO TITLE>'): String {
        string_builder = StringBuilder();
        
        string_builder.add_line(headline)

        for (i = 0; i < len(self.__layout); i += 1) {
            elem = self.__layout[i];

            string_builder.add_line(elem.gen_md_string());
        }

        return string_builder.get_string()
    }
}


namespace Test {
    #from os import popen
    f = popen;

    func test(filename: String) {
        print 'generating...';

        f = open(filename, 'w');
        
        doc_gen = DocGen();
        func_sign = FuncSignature.from_func(Test.f);
        
        elems = doc_gen._gen_function(func_sign);
        
        mdb = MarkdownBuilder();
        mdb.add_element(elems);

        f.write(mdb.get_markdown_string());
        print 'Successfully generated markdown to \'{}\''.format(filename);
    }
}


if __main__ {
    Test.test('test.md')
}

