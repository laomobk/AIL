词法分析
########


行
~~

AIL程序通常由一行或者多行语句构成。其中，行分为 **逻辑行** 和 **物理行** 。


逻辑行
------

逻辑行是根据AIL的语法而规定的一种行结构，除符合语句外，一般以 *NEWLINE* 结尾。下面的代码只有一条逻辑行。

.. code::

    v = [1, 2, 3,
         4, 5, 6]  # end of logical line


物理行
------

物理行是由若干个字符组成，以换行符结尾的一种行结构。下面的代码有两条物理行。

.. code::

    v = [1, 2, 3,  # line 1
         4, 5, 6]  # line 2


注释
~~~~

AIL有两种注释类型： **行注释** 和 **块注释** 。行注释以 :code:`//` 开头，以换行符结尾。

.. code::
    
    date = 726  // assign 726 to date


块注释可以跨多行，也可以嵌套在语句中。块注释以 :code:`/*` 开头， :code:`*/` 结尾。



行拼接
~~~~~~

编写AIL程序时可能会涉及到行拼接的问题，即逻辑行不在一行内。对于这种情况，AIL提供了行拼接操作。

显式行拼接
----------

使用 :code:`\ `, 可以将当前物理行与下一个物理行拼接在一起。当反斜杠在字符串外，且 **反斜杠的下一个字符字符即是换行符** ，这时后AIL的词法分析器会将跳过这个反斜杠和之后的换行符，并把行号计数器加一。

.. code::

    if age == 3 and \
       height = 80 {

       // ...
    }


注意， :code:`\ ` 后不可以有除换行符以外的 **任何字符** 。

隐式行拼接
----------

在一些特殊场合，AIL会隐式地进行行拼接，通常是当换行出现在字符串外， :code:`( )` 或 :code:`[ ]` 内时。

.. code::

    v = [1, 2, 3,
         4, 5, 6]

    v2 = f(1, 2, 3,
           4, 5, 6)


实际上，这个时候隐式行拼接也一样适用。

