结构体
******


AIL **目前** 没有class机制，取而代之的是struct。


结构体
======


定义结构体
##########

结构体定义语法：

.. code::

    struct NAME {
        [NAME | ('protected' NAME) NEWLINE]*
    }


.. code::

    struct Person {
        name
        age
    }


上面的代码定义了一个由两个成员(name和age)组成的结构体。


结构体类型
##########

结构体在AIL中的类型叫做结构体类型(struct type)，结构体类型用于作为模板实例化一个对象，其作用类似与 *类* 。


受保护成员
##########

若想要已经初始化的对象的成员不被修改，则可以使用 :code:`protected` 关键字修饰该成员。若成员被protected修饰，则请在初始化对象的时候就给这个成员提供值，否则只有在 **绑定方法** 内部才能去修改这个值。


私有成员
########

当一个结构体成员不想被外部所访问到时，可以将其命名为私有成员。私有成员和一般成员、受保护成员不同，其命名是以 **双下划线(__)** 开头的。

私有成员只能被绑定该结构体的绑定方法所访问和修改。


绑定方法
########

在AIL中，可以给一个结构体绑定函数，被绑定的 *函数* 因为类似于面向对象中的方法，所以叫 **绑定方法** 。

绑定方法的定义是写在结构体之外的，是独立于结构体的。其写法与函数的定义有点类似：

.. code::

    fun '(' NAME ')' NAME '(' args ')' function_body


和函数定义不同的是，方法的定义在fun后面加了一个name，这个name指的是 **被绑定的结构体的名称** 。

**注意，绑定方法的定义只能与结构体处在同一命名空间中，且能够被直接访问到，即被绑定的结构体不能通过成员属性的访问、数组的下标等方式间接访问到，而是由名称直接指向该结构体。**

通过绑定方法，可以访问并修改被绑定结构体中的protected成员。

方法的参数
~~~~~~~~~~

绑定方法必须有 **一个或一个以上的参数** ，这是因为，方法的第一个参数传入的是被绑定都结构体的对象（即使在整个方法中都没有用到第一个参数），这个参数是由AIL传入的，不需要手动传入！

.. code::

    fun (Cat) meow(self) {
        print 'meow'
    }


命名建议
--------

如果在整个方法中都没有用到该参数，则建议将第一个参数命名为 :code:`_` ，否则建议命名为 :code:`self` 或者 :code:`this` 。


实例化结构体
############

在AIL中，可以使用其内置的 :code:`new(...)` 函数来实例化结构体。

.. code::

    new(struct, [defaults: array]) -> struct_object

    :param struct 用于实例化的结构体类型
    :param default 实例化结构体时各个成员的默认值（可选）


默认值以数组的形式提供，有几个成员，默认值列表就有几个值，不能多于或者少于。


结构体对象
==========

结构体经过 :code:`new(...)` 函数实例化后，得到一个结构体对象。结构体对象可以访问或者修改其成员。

.. code::

    struct Person {
        name
        __age
    }

    fun (Person) getAge(self) {
        return this.__age
    }

    nezha = new(Person, ['Nezha', 3])

    print nezha.name; nezha.getAge()

    // output:
    // Nezha 3


如果结构体对象作为参数传递，则传递的是该结构体的 **引用** （结构体亦如此）。

