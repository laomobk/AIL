基本类型
########


数字
++++

AIL数字分为整数，浮点数，复数。

精度与范围
~~~~~~~~~~

浮点数最大精度为64位精度。

整数大小在一定程度上没有限制（受到内存制约）。

表示方式
~~~~~~~~

AIL用于表示实数的方式有两种： **直接表示** 与 **科学计数法** 。

直接表示
********

如：726, 50.13
正则表达式: :code:`^-?\d+\.?\d*$*`

科学计数法
**********

如：1e10, 3e-2, 6.2e3
正则表达式: :code:`^([\\+|-]?\\d+(.{0}|.\\d+))[Ee]{1}([\\+|-]?\\d+)$`

其他进制
~~~~~~~~

对于整数，AIL还提供了除10进制以外的其他进制表示：2进制、8进制、16进制。

2进制
*****

以: **0b** 或 **0B** 开头，后加 [0 - 1] 的数字字符。
如: 0b01101, 0b1011010110

8进制
*****

以: **0o** 或 **0O** 开头，后加 [0 - 7] 的数字字符。
如: 0o11557, 0O1326

16进制
******

以: **0x** 或 **0X** 开头，后加 [0 - 9] ∪ [a - f] ∪ [A - F] 的字符。
如: 0xcafebabe, 0X2d6

复数
~~~~

AIL中提供了对复数的支持，其以 :code:`complex` 类型的方式存在。

在AIL中，可以使用 :code:`complex(real, imag)` 函数来产生一个复数，其实部是real，虚部是imag。

complex类型支持与complex自身、integer、float类型进行基本四则运算和幂运算。


字符串
++++++

AIL的字符串默认情况下以 UTF-8 编码方式进行编码，以保证最好的兼容性。

单行字符串
~~~~~~~~~~

单行字符串以 :code:`'` 或 :code:`"` 开头，以相对应的开头进行结尾。开头结尾的引号不能混用。若要在字符串内表示用于开头的引号，需要在引号前使用反斜杠 \ 转义。

多行字符串
~~~~~~~~~~

AIL中并没有严格区分多行字符串与单行字符串。对起始和结尾的引号的要求与单行字符串相同。


数组
++++

AIL提供了对于动态数组的支持，其使用方法于一般的动态数组（如Java中的ArrayList）类似。

AIL中用于表示数组的语法为: :code:`'[' expr (',' expr)* ']'` 。

AIL用于表示数组的类型为 :code:`array` 。

.. code::

    >> info = [3, 726, 50.13]


