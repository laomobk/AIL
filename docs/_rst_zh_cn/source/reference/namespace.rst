名称空间
########


类型
++++

AIL的名称空间可分为3种：本地命名空间，全局命名空间，内置成员命名空间。


检索顺序
++++++++

当要检索一个名称时，如果没有特别指定，AIL会根据： **本地名称空间 → 全局名称空间 → 内置成员名称空间** 的顺序检索名称空间。


结构与从属关系
++++++++++++++

各个名称空间的结构与从属关系为：

.. code::
    
    [global 
        [local 
            [current ...] + 
            ([nonlocal ...] + ... + [nonlocal ...])
        ] ...
    ] + 
    [builtins ...]


本地名称空间
++++++++++++

AIL中的本地名称空间包括： **当前名称空间(和外部名称空间列表)** 。

其中，当前名称空间是离代码最近的一个名称空间，用户的代码就是在这个名称空间内执行的。如果没有特殊指定，AIL首先会检索这一个名称空间。

如果执行的代码在函数之中，则可能会出现外部命名空间(列表)。这是因为在函数执行时，执行的函数可能处于另一个函数之中，即内嵌函数或闭包。为了能访问到外部函数的内容，本地名称空间会拥有一个对外部名称空间的 **引用** 。一般地，有几层外部函数，就有几个引用。

需要注意的是， **即使在全局域中，全局名称空间也不等于本地名称空间** ，在全局域中进行变量的定义会将变量填入到 **全局名称空间** 中，在这种情况下，本地名称空间虽然存在且可以被访问，但不会有变量添加到里面。


全局名称空间
++++++++++++

AIL中，全局名称空间只有一个，用于存放全局成员，当进行import或者load时，也是使用全局名称空间的成员。


内置成员名称空间
++++++++++++++++

AIL中，内置成员名称空间是独立与其他名称空间的，同时，内置成员名称空间也是受保护的。

不能改变内置名称空间中成员的值，在代码中对内置成员进行赋值。实际只是在全局名称空间中 **挡住** 原来的内置成员。


作用域声明
++++++++++

为了实现跨名称空间进行变量的修改，AIL提供了作用域声明，即显式地声明变量的位置。AIL提供两种作用域声明： **global** , **nonlocal** 。

global声明
~~~~~~~~~~

若在函数内想要对全局名称空间的变量进行修改时，可以在函数中对该变量进行global声明：

.. code::
    
    name = 'Nezha'

    fun f() {
        global name
        name = 'Zhaer'
    }

    print name
    f()
    print name


    // output is:
    // Nezha
    // Zhaer


global声明可以写在函数内的任意位置，但为了美观起见，建议将global声明写在函数的起始位置（如上面的代码），或者可以写在第一次对变量进行修改的位置：

.. code::
    
    fun f() {
        // ...

        global name
        name = 'Zhaer'

        //...
    }


这是因为，global声明（和nonlocal声明）都是在编译期间完成，而作用于运行时的。且AIL不会因为global声明（或nonlocal声明）对产生的字节码做出修改。



nonlocal声明
~~~~~~~~~~~~

当变量在本地名称空间内，但却又不在当前名称空间内的时候，若要对变量进行修改，则需要对该变量进行nonlocal声明。

.. code::

    name变量与当前名称空间的关系如下：

    [ -local-
        [ -nonlocal-
            name: 'Nezha'
        ],
        [ -current-
            ...
        ]
    ]


和global声明类似，nonlocal声明对书写位置也不做要求。

.. code::

    fun outer() {
        name = 'Nezha'
        fun inner() {
            nonlocal name
            name = 'Zhaer'
        }
        print name
        inner()
        print name
    }

    
    // output is:
    // Nezha
    // Zhaer



查看名称空间
++++++++++++

AIL提供了 :code:`globals()` 函数和 :code:`locals()` 函数来查看当前名称空间所具有的成员，但不能查看其值。

.. code::

    >> locals()
    ['__temp__']
    >> globals()
    ['exit', 'copyright', '__main__']

