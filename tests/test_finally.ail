fun _cause_exception() {
    print '-- causing a exception: 1 / 0'
    1 / 0
}

cases = []
add_case = cases.append

fun test_plain_finally() {
    try {
        print '>> test finally no exception'
    } finally {
        print '-- this is finally'
    }
}
add_case(test_plain_finally)

fun test_catch_finally_with_exception() {
    try {
        print '>> test catch-finally with exception'
        print '-- causing a exception: 1 / 0'
        1 / 0
    } catch exception {
        print '-- exception caught:'
        print exception
    } finally {
        print '-- finally here'
    }
}
add_case(test_catch_finally_with_exception)

fun test_plain_finally_with_exception() {
    try {
        print '>> test plain finally with exception'
        print '-- causing a exception: 1 / 0'
        1 / 0
    } finally {
        print '-- exception occurred but finally is here'
    }
}
add_case(test_plain_finally_with_exception)

fun test_catch_finally_with_no_exception() {
    try {
        print '>> test finally with no exception'
        print '-- no exception but a catch block is here'
    } catch exception {
        print '-- exception caught: (shouldnot be printed)'
        print exception
    } finally {
        print '-- finally here'
    }
}
add_case(test_catch_finally_with_no_exception)

fun test_plain_finally_with_call() {
    try {
        print '>> test finally with call'
        _cause_exception()
    } finally {
        print '-- an exception occurred, but finally is here'
    }
}
add_case(test_plain_finally_with_call)

fun test_plain_finally_with_return() {
    try {
        print '>> test finally with return 0'
        return 'this is try block'
    } finally {
        print 'function returned, but finally is here'
    }
}
add_case(test_plain_finally_with_return)

fun test_return_inside_finally() {
    try {
        print '>> test return inside finally'
    } finally {
        return 'this is finally'
    }
}
add_case(test_return_inside_finally)

fun test_return_inside_finally_with_return() {
    try {
        print '>> test finally with return'
        return 'this is try block of a return-inside finally, ' + \
                'but should not be printed'
    } finally {
        print 'function returned, but finally is here'
        return 'this is finally'
    }
}
add_case(test_return_inside_finally_with_return)

fun test_complex_finally() {
    try {
        print '>> test complex finally'
        print '-- here is try block (level 1)'
    } finally {
        print '-- here is finally (level 1)'
        try {
            print '-- here is try block (level 2)'
        } finally {
            print '-- here is finally block (level 2)'
        }
    }
}
add_case(test_complex_finally)

fun test_complex_finally_with_exception() {
    try {
        print '>> test complex finally'
        print '-- here is try block (level 1)'
        print '-- an exception will be occurred in level 1: 1 / 0'
        1 / 0
    } finally {
        print '-- here is finally (level 1)'
        try {
            print '-- here is try block (level 2)'
            print '-- an exception will be occurred in level 2: 2 / 0'
            2 / 0
        } finally {
            print '-- here is finally block (level 2)'
        }
    }
}
add_case(test_complex_finally_with_exception)

fun test_complex_finally_with_return() {
    try {
        print '>> test complex finally'
        print '-- here is try block (level 1)'
        print '-- return: level 1'
        return 'level 1'
    } finally {
        print '-- here is finally (level 1)'
        try {
            print '-- here is try block (level 2)'
            print '-- return: level 2'
            return 'level 2'
        } finally {
            print '-- here is finally block (level 2)'
        }
    }
}
add_case(test_complex_finally_with_return)

fun test_complex_finally_with_call() {
    try {
        print '>> test complex finally'
        print '-- here is try block (level 1)'
        _cause_exception()
    } finally {
        print '-- here is finally (level 1)'
        try {
            print '-- here is try block (level 2)'
            _cause_exception()
        } finally {
            print '-- here is finally block (level 2)'
        }
    }
}
add_case(test_complex_finally_with_call)

fun test_finally_with_break() {
    print '>> test finally with break in loop'
    for (i = 0; i < 5; ++i) {
        try {
            print '-- i = %s'.format(i)
            if i > 2 {
                print '-- i > 2, break'
                break
                print '-- under break, should not be printed'
            }
        } finally {
            print '-- here is finally, i = %s'.format(i)
        }
    }
    print '-- out of loop'
}
add_case(test_finally_with_break)

fun test_break_finally_with_break() {
    print '>> test break-finally with break in loop'
    for (i = 0; i < 5; ++i) {
        try {
            print '-- i = %s'.format(i)
            break
            print '-- under break, should not be printed'
        } finally {
            print '-- here is finally, i = %s'.format(i)
            print '-- break in finally'
            break
            print '-- under break, should not be printed'
        }
    }
    print '-- out of loop'
}
add_case(test_break_finally_with_break)

fun test_finally_with_continue() {
    print '>> test finally with continue in loop'
    for (i = 0; i < 5; ++i) {
        try {
            print '-- i = %s'.format(i)
            if i > 2 {
                print '-- i > 2, continue'
                continue
                print '-- under continue, should not be printed'
            }
            print '-- under if, be printed until i > 2'
        } finally {
            print '-- here is finally, i = %s'.format(i)
        }
    }
    print '-- out of loop'
}
add_case(test_finally_with_continue)

fun test_continue_finally_with_continue() {
    print '>> test continue-finally with continue in loop'
    for (i = 0; i < 5; ++i) {
        try {
            print '-- i = %s'.format(i)
            continue
            print '-- under continue, should not be printed'
        } finally {
            print '-- here is finally, i = %s'.format(i)
            print '-- continue in finally'
            continue
            print '-- under continue, should not be printed'
        }
        print '-- under continue, should not be printed'
    }
    print '-- out of loop'
}
add_case(test_continue_finally_with_continue)


fun test_main() {
    for (i = 0; i < len(cases); ++i) {
        print '\n-- case %s --\n'.format(i + 1)
        try {
            v = cases[i]()
            if not equal(v, null) {
                print '<< case return: '; v
            }
        } catch err {
            print '<< occurred exception:'
            print err.toString()
        }
    }
    print ('\n-- %s case(s) testing finished, ' + 
          'program output is above --').format(len(cases))
}


if __is_main__ {
    test_main()
}

